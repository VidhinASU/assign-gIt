•  What is a gitignore file and what should it include for a Java project?
A .gitignore file is a text file which contains a list of all the files and folders that Git will ignore and not track meaning that changes in these files will not be tracked and not clutter the repository with unnecessary changes for these commits. E.g. node_modules/ should not be included.

For Java, I have attached an example of a sample .gitignore file here:
### Java ###
# Compiled class file
*.class

# Log file
*.log

# BlueJ files
*.ctxt

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*
replay_pid*
# end of file
This .gitignore files gives a list of files for the Java project which are generated by Java IDEs that should not be tracked by git so that they do not clutter the repository with changes which are unnecessary for other users for the repository. 
•  What does fast-forward in git mean?
If the Master/Main branch is git has not diverged, instead of creating a new commit, fast-forward with git will just point master to the latest 
•  Why should you have different branches?
It is necessary to have different branches in a github so every user can work in a different development branch and then merge these changes into the main branch in such a way that changes of any user are not rejected and the main branch is up-todate with changes from all the developers involved in the project.
This is also used when different developers are working on different features on the project, instead of them all working on the master branch, they can develop their changes in different branches each and do the development and testing there, leaving the master/production branch safe from changes in the other branches.
•  In a project how many remote Git repositories do you usually have?
In a project, every developer should work on a different remote Git repository(branch) such that they are not working on master for these new features but are working on these new features on a different remote. After they are done with the new feature, they can merge/send a pull request from the remote to master so that their changes are pushed to the master/production branch. In any case, there should be at least 2 remote Git repositories(branches): one being the master and the other being the development branch. It is a good practice to have a branch for each user story. 
